const mongoose = require("mongoose");
const Submission = require("../models/submission");

// üü¢ L∆∞u ho·∫∑c c·∫≠p nh·∫≠t b√†i n·ªôp
const addSubmission = async (req, res) => {
  try {
    const { userId, quizId, answers, score, totalQuestions, timeSpent } =
      req.body;

    if (!userId || !quizId || !answers || !totalQuestions) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc." });
    }

    const existing = await Submission.findOne({ userId, quizId });

    let updatedSubmission;
    if (existing) {
      updatedSubmission = await Submission.findOneAndUpdate(
        { userId, quizId },
        {
          answers,
          totalQuestions,
          timeSpent,
          score,
          bestScore: Math.max(existing.bestScore || existing.score || 0, score),
        },
        { new: true }
      );
    } else {
      updatedSubmission = new Submission({
        userId,
        quizId,
        answers,
        score,
        bestScore: score,
        totalQuestions,
        timeSpent,
      });
      await updatedSubmission.save();
    }

    res.status(201).json({
      message: "ƒê√£ l∆∞u b√†i n·ªôp th√†nh c√¥ng!",
      submission: updatedSubmission,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u b√†i n·ªôp:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ l∆∞u b√†i n·ªôp." });
  }
};

// üü¢ L·∫•y b√†i l√†m g·∫ßn nh·∫•t
const getLatestSubmission = async (req, res) => {
  try {
    const { quizId, userId } = req.params;

    if (!quizId || !userId) {
      return res.status(400).json({ message: "Thi·∫øu quizId ho·∫∑c userId." });
    }

    const latest = await Submission.findOne({
      quizId: new mongoose.Types.ObjectId(quizId),
      userId: new mongoose.Types.ObjectId(userId),
    })
      .sort({ updatedAt: -1 })
      .lean();

    if (!latest) return res.status(200).json(null);
    res.status(200).json(latest);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i l√†m g·∫ßn nh·∫•t:", error);
    res
      .status(500)
      .json({
        message: "Kh√¥ng th·ªÉ l·∫•y b√†i l√†m g·∫ßn nh·∫•t.",
        error: error.message,
      });
  }
};

// üü¢ L·∫•y to√†n b·ªô submission c·ªßa user
const getUserSubmissions = async (req, res) => {
  try {
    const { userId } = req.params;
    const submissions = await Submission.find({ userId })
      .populate("quizId")
      .sort({ updatedAt: -1 });

    res.status(200).json(submissions);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i n·ªôp:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y b√†i n·ªôp c·ªßa ng∆∞·ªùi d√πng." });
  }
};

module.exports = {
  addSubmission,
  getUserSubmissions,
  getLatestSubmission,
};
