// üìÅ controllers/submissionController.js
import mongoose from "mongoose";
import Submission from "../models/submission.js";

// üü¢ L∆∞u ho·∫∑c c·∫≠p nh·∫≠t b√†i n·ªôp
// controllers/submissionController.js
import mongoose from "mongoose";
import Submission from "../models/submission.js";

export const addSubmission = async (req, res) => {
  try {
    const { userId, quizId, answers, score, totalQuestions, timeSpent } =
      req.body;

    // basic required fields
    if (!userId || !quizId || !answers || !totalQuestions) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc." });
    }

    // Normalize & validate score n·∫øu c√≥
    let scoreNum;
    if (typeof score !== "undefined" && score !== null) {
      scoreNum = Number(score);
      if (Number.isNaN(scoreNum) || scoreNum < 0) {
        // b·∫°n c√≥ th·ªÉ decide: reject request ho·∫∑c set v·ªÅ 0; ·ªü ƒë√¢y reject request
        return res.status(400).json({ message: "Score kh√¥ng h·ª£p l·ªá." });
      }
    }

    const filter = {
      userId: new mongoose.Types.ObjectId(userId),
      quizId: new mongoose.Types.ObjectId(quizId),
    };

    const existing = await Submission.findOne(filter);

    if (existing) {
      // Build update object: lu√¥n c·∫≠p nh·∫≠t answers/totalQuestions/timeSpent
      const update = {
        $set: {
          answers,
          totalQuestions,
          timeSpent,
          // ch·ªâ set score n·∫øu score h·ª£p l·ªá ƒë∆∞·ª£c g·ª≠i
          ...(typeof scoreNum !== "undefined" ? { score: scoreNum } : {}),
        },
      };

      // S·ª≠ d·ª•ng $max ƒë·ªÉ ƒë·∫£m b·∫£o bestScore ch·ªâ tƒÉng l√™n (kh√¥ng b·ªã gi·∫£m)
      if (typeof scoreNum !== "undefined") {
        update.$max = { bestScore: scoreNum };
      }

      const updatedSubmission = await Submission.findOneAndUpdate(
        filter,
        update,
        { new: true }
      );

      return res.status(200).json({
        message: "ƒê√£ c·∫≠p nh·∫≠t b√†i n·ªôp!",
        submission: updatedSubmission,
      });
    } else {
      // New submission: require scoreNum? ·ªü ƒë√¢y n·∫øu score kh√¥ng h·ª£p l·ªá th√¨ ƒë√£ b·ªã reject ph√≠a tr√™n.
      const newSub = new Submission({
        userId,
        quizId,
        answers,
        score: typeof scoreNum !== "undefined" ? scoreNum : 0,
        bestScore: typeof scoreNum !== "undefined" ? scoreNum : 0,
        totalQuestions,
        timeSpent,
      });

      await newSub.save();

      return res.status(201).json({
        message: "ƒê√£ l∆∞u b√†i n·ªôp th√†nh c√¥ng!",
        submission: newSub,
      });
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u b√†i n·ªôp:", error);
    return res.status(500).json({ message: "Kh√¥ng th·ªÉ l∆∞u b√†i n·ªôp." });
  }
};

// üü¢ L·∫•y b√†i l√†m g·∫ßn nh·∫•t
export const getLatestSubmission = async (req, res) => {
  try {
    const { quizId, userId } = req.params;

    if (!quizId || !userId) {
      return res.status(400).json({ message: "Thi·∫øu quizId ho·∫∑c userId." });
    }
    if (
      !/^[0-9a-fA-F]{24}$/.test(quizId) ||
      !/^[0-9a-fA-F]{24}$/.test(userId)
    ) {
      return res
        .status(400)
        .json({ message: "quizId ho·∫∑c userId kh√¥ng h·ª£p l·ªá." });
    }

    const latest = await Submission.findOne({
      quizId: new mongoose.Types.ObjectId(quizId),
      userId: new mongoose.Types.ObjectId(userId),
    })
      .sort({ updatedAt: -1 })
      .lean();

    if (!latest) return res.status(200).json(null);
    res.status(200).json(latest);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i l√†m g·∫ßn nh·∫•t:", error);
    res.status(500).json({
      message: "Kh√¥ng th·ªÉ l·∫•y b√†i l√†m g·∫ßn nh·∫•t.",
      error: error.message,
    });
  }
};

// üü¢ L·∫•y to√†n b·ªô submission c·ªßa user
export const getUserSubmissions = async (req, res) => {
  try {
    const { userId } = req.params;
    const submissions = await Submission.find({ userId })
      .populate("quizId")
      .sort({ updatedAt: -1 });

    res.status(200).json(submissions);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i n·ªôp:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y b√†i n·ªôp c·ªßa ng∆∞·ªùi d√πng." });
  }
};

// üü¢ L·∫•y t·∫•t c·∫£ submission theo m√¥n h·ªçc
export const getAllSubmissionFromSubject = async (req, res) => {
  const { userId, subjectId } = req.params;

  try {
    const submissions = await Submission.find({ userId, subjectId })
      .populate("quizId")
      .populate("chapterId");

    res.json(submissions);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi l·∫•y submissions theo m√¥n" });
  }
};

// üü¢ L·∫•y best submission
export const getBestSubmission = async (req, res) => {
  try {
    const { quizId, userId } = req.params;

    if (!quizId || !userId)
      return res.status(400).json({ message: "Thi·∫øu quizId ho·∫∑c userId" });

    if (
      !/^[0-9a-fA-F]{24}$/.test(quizId) ||
      !/^[0-9a-fA-F]{24}$/.test(userId)
    ) {
      return res
        .status(400)
        .json({ message: "quizId ho·∫∑c userId kh√¥ng h·ª£p l·ªá" });
    }

    const bestSubmission = await Submission.findOne({
      quizId: new mongoose.Types.ObjectId(quizId),
      userId: new mongoose.Types.ObjectId(userId),
    })
      .sort({ bestScore: -1 })
      .lean();

    res.status(200).json(bestSubmission || null);
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y best submission", error: err.message });
  }
};
