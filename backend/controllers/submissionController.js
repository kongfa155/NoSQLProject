const Submission = require("../models/submission");

const addSubmission = async (req, res) => {
  try {
    const { userId, quizId, answers, score, totalQuestions, timeSpent } = req.body;

    if (!userId || !quizId || !answers || !totalQuestions) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc." });
    }

    // üü¢ Lu√¥n l∆∞u l·∫°i l·∫ßn l√†m g·∫ßn nh·∫•t
    const latestSubmission = await Submission.findOneAndUpdate(
      { userId, quizId, type: "latest" },
      { userId, quizId, answers, score, totalQuestions, timeSpent, type: "latest" },
      { upsert: true, new: true }
    );

    // üü¢ C·∫≠p nh·∫≠t ƒëi·ªÉm cao nh·∫•t n·∫øu c·∫ßn
    const bestSubmission = await Submission.findOne({ userId, quizId, type: "best" });

    if (!bestSubmission || score > bestSubmission.score) {
      await Submission.findOneAndUpdate(
        { userId, quizId, type: "best" },
        { userId, quizId, answers, score, totalQuestions, timeSpent, type: "best" },
        { upsert: true, new: true }
      );
    }

    res.status(201).json({
      message: "ƒê√£ l∆∞u b√†i n·ªôp th√†nh c√¥ng!",
      latestSubmission,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u b√†i n·ªôp:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ l∆∞u b√†i n·ªôp." });
  }
};

// üîπ L·∫•y t·∫•t c·∫£ b√†i n·ªôp c·ªßa ng∆∞·ªùi d√πng (g·ªìm best + latest)
const getUserSubmissions = async (req, res) => {
  try {
    const { userId } = req.params;
    const submissions = await Submission.find({ userId })
      .populate("quizId")
      .sort({ updatedAt: -1 });

    res.status(200).json(submissions);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i n·ªôp:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y b√†i n·ªôp c·ªßa ng∆∞·ªùi d√πng." });
  }
};

module.exports = {
  addSubmission,
  getUserSubmissions,
};
