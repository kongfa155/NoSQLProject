import { useEffect, useState } from "react";
import { useLocation, useParams } from "react-router-dom";
import styles from "./ReviewQuizPage.module.css";
import ReviewDrawer from "../../components/ReviewDrawer/ReviewDrawer";

const ReviewQuizPage = () => {
  const { quizid } = useParams();
  const [quizInfo, setQuizInfo] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
    const location = useLocation();
    const submission = location.state?.data;
    useEffect(() => {
    const fetchQuiz = async () => {
        if(submission) {
            //Sau n√†y fetch d·ªØ li·ªáu c√¢u h·ªèi
        } 
      const fakeQuiz = {
        _id: quizid,
        name: "Ki·ªÉm tra nhanh Gi·ªõi thi·ªáu ng√¥n ng·ªØ l·∫≠p tr√¨nh",
        timeLimit: 5,
        questions: [
          {
            _id: "q1",
            question: "Ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o sau ƒë√¢y l√† ng√¥n ng·ªØ b·∫≠c th·∫•p?",
            options: ["Python", "C", "Assembly", "Java"],
            answer: "Assembly",
            explain: "Assembly l√† ng√¥n ng·ªØ b·∫≠c th·∫•p g·∫ßn v·ªõi m√£ m√°y nh·∫•t.",
          },
          {
            _id: "q2",
            question: "T·ª´ kh√≥a n√†o d√πng ƒë·ªÉ khai b√°o bi·∫øn trong JavaScript?",
            options: ["var", "int", "define", "dim"],
            answer: "var",
            explain: "JavaScript d√πng var, let, const ƒë·ªÉ khai b√°o bi·∫øn.",
          },
          {
            _id: "q3",
            question: "K·∫øt qu·∫£ c·ªßa 3 + '2' trong JavaScript l√† g√¨?",
            options: ["5", "32", "NaN", "Error"],
            answer: "32",
            explain:
              "JavaScript s·∫Ω chuy·ªÉn s·ªë 3 th√†nh chu·ªói ‚Üí '3' + '2' = '32'.",
          },
        ],
      };

      setQuizInfo(fakeQuiz);
      setQuestions(fakeQuiz.questions);
      setLoading(false);
    
    };

    fetchQuiz();
  }, [quizid]);

  if (loading) return <div>ƒêang t·∫£i d·ªØ li·ªáu b√†i ki·ªÉm tra...</div>;

  return (
    // Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    <div className={styles.reviewContainer}>
      <h2 className={styles.quizTitle}>Xem l·∫°i: {quizInfo.name}</h2>
      <p className={styles.quizInfo}>
        Th·ªùi gian gi·ªõi h·∫°n: {quizInfo.timeLimit} ph√∫t
      </p>
    {/* Hi·ªÉn th·ªã to√†n b·ªô c√¢u h·ªèi v√† gi·∫£i th√≠ch */}
      {questions.map((q, idx) => (
        <div
          key={q._id}
          id={`question-${idx + 1}`}
          className={styles.questionBlock}
        >
          <p className={styles.questionText}>
            {idx + 1}. {q.question}
          </p>
            {/* Hi·ªÉn th·ªã to√†n b·ªô ƒë√°p √°n v√† set class ƒë√°p √°n */}
          <ul className={styles.optionList}>
            {q.options.map((opt, i) => (
              <li
                key={i}
                className={`${styles.optionItem}
                 ${opt === submission?.answer[q._id] ? styles.userChoice : ""}
                 ${opt === q.answer ? styles.correctOption : ""}
                 `}
              >
                {opt}
              </li>
            ))}
          </ul>
            {/* Ch·ªó n√†y hi·ªÉn th·ªã gi·∫£i th√≠ch */}
          <div className={styles.explainBox}>
            <span className={styles.explainLabel}>üí° Gi·∫£i th√≠ch:</span>
            <p className={styles.explainText}>{q.explain}</p>
          </div>
        </div>
      ))}

      {/* Drawer m·ªõi */}
      <ReviewDrawer totalQuestions={questions.length} />
    </div>
  );
};

export default ReviewQuizPage;
