import React, { useEffect, useRef, useState } from "react";
import { useSelector } from "react-redux";
import styles from "./ContributedQuizPage.module.css";
import axios from "axios";
import { MdExpandMore as ExpandButton } from "react-icons/md";
import ContributedQuizList from "../../components/ContributedQuizList/ContributedQuizList";

export default function ContributedQuizPage() {
  const { account } = useSelector((state) => state.user);
  const [subjects, setSubjects] = useState([]);
  const [chapters, setChapters] = useState([]);

  const [selectedSubject, setSelectedSubject] = useState(null);
  const [selectedChapter, setSelectedChapter] = useState(null);

  const [expandSubject, setExpandSubject] = useState(false);
  const [expandChapter, setExpandChapter] = useState(false);

  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadStatus, setUploadStatus] = useState("");

  // ref b·ªçc c·∫£ input + list ƒë·ªÉ click v√†o item ƒë∆∞·ª£c coi l√† "inside"
  const subjectRef = useRef(null);
  const chapterRef = useRef(null);

  // T·ª± ƒë√≥ng dropdown khi click ra ngo√†i
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (subjectRef.current && !subjectRef.current.contains(event.target)) {
        setExpandSubject(false);
      }
      if (chapterRef.current && !chapterRef.current.contains(event.target)) {
        setExpandChapter(false);
      }
    };
    // d√πng 'click' ƒë·ªÉ onClick c·ªßa item ch·∫°y tr∆∞·ªõc khi handler ƒë√≥ng dropdown
    document.addEventListener("click", handleClickOutside);
    return () => document.removeEventListener("click", handleClickOutside);
  }, []);

  // L·∫•y danh s√°ch m√¥n h·ªçc
  useEffect(() => {
    axios
      .get("/api/subjects")
      .then((res) => setSubjects(res.data || []))
      .catch((err) => console.error("L·ªói khi l·∫•y danh s√°ch m√¥n h·ªçc:", err));
  }, []);

  // L·∫•y danh s√°ch ch∆∞∆°ng khi ch·ªçn m√¥n (ch·ªâ khi c√≥ _id th·ª±c)
  useEffect(() => {
    if (selectedSubject && selectedSubject._id) {
      axios
        .get(`/api/chapters/subject/${selectedSubject._id}`)
        .then((res) => setChapters(res.data || []))
        .catch((err) => console.error("L·ªói khi l·∫•y ch∆∞∆°ng:", err));
    } else {
      setChapters([]);
    }
  }, [selectedSubject]);

  // Upload file CSV
  const handleFileUpload = async () => {
    if (!selectedFile || !selectedSubject) {
      setUploadStatus("‚ö†Ô∏è Vui l√≤ng ch·ªçn m√¥n h·ªçc (ho·∫∑c 'Kh√°c') v√† file CSV!");
      return;
    }

    if (selectedSubject._id !== null && !selectedChapter) {
      setUploadStatus("‚ö†Ô∏è Vui l√≤ng ch·ªçn ch∆∞∆°ng cho m√¥n ƒë√£ ch·ªçn!");
      return;
    }

    if (!account || !account.accessToken) {
      setUploadStatus("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi t·∫£i l√™n!");
      return;
    }

    const formData = new FormData();
    formData.append("file", selectedFile);
    // n·∫øu l√† "Kh√°c" th√¨ _id s·∫Ω null -> g·ª≠i "" (backend s·∫Ω map "" => null)
    formData.append("subjectId", selectedSubject._id ?? "");
    formData.append("chapterId", selectedChapter?._id ?? "");

    try {
      setUploadStatus("‚è≥ ƒêang t·∫£i l√™n...");
      const res = await axios.post("/api/contributed/uploadCSV", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${account.accessToken}`,
        },
      });
      setUploadStatus("‚úÖ T·∫£i l√™n th√†nh c√¥ng!");
      console.log("Upload th√†nh c√¥ng:", res.data);

      // Reset form
      setSelectedFile(null);
      setSelectedSubject(null);
      setSelectedChapter(null);
      const fileEl = document.getElementById("fileInput");
      if (fileEl) fileEl.value = "";
    } catch (err) {
      console.error("‚ùå Upload CSV error:", err);
      setUploadStatus(
        err.response?.data?.message ||
          "‚ùå L·ªói khi t·∫£i l√™n. Vui l√≤ng th·ª≠ l·∫°i sau!"
      );
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.introBox}>
        <h1 className={styles.title}>ƒê√≥ng G√≥p ƒê·ªÅ Tr·∫Øc Nghi·ªám</h1>
        <p className={styles.description}>
          H√£y c√πng ƒë√≥ng g√≥p nh·ªØng b·ªô c√¢u h·ªèi ch·∫•t l∆∞·ª£ng ƒë·ªÉ c·ªông ƒë·ªìng c√πng h·ªçc
          t·ªët h∆°n! B·∫°n c√≥ th·ªÉ t·∫£i l√™n file CSV ch·ª©a ƒë·ªÅ, ho·∫∑c t·∫°o ƒë·ªÅ tr·ª±c ti·∫øp
          tr√™n h·ªá th·ªëng. T·∫•t c·∫£ ƒë·ªÅ g·ª≠i l√™n s·∫Ω ƒë∆∞·ª£c ki·ªÉm duy·ªát tr∆∞·ªõc khi xu·∫•t b·∫£n
          ch√≠nh th·ª©c.
        </p>
      </div>

      <div className={styles.contentBox}>
        {account.role === "Admin" ? (
          <ContributedQuizList />
        ) : (
          <div className={styles.formArea}>
            {/* Subject: ref b·ªçc c·∫£ input + list */}
            <div ref={subjectRef}>
              <div className={styles.dropdownRow}>
                <p className={styles.label}>Ch·ªçn m√¥n h·ªçc:</p>
                <div className={styles.dropdownContainer}>
                  <input
                    type="text"
                    className={styles.dropdownInput}
                    readOnly
                    value={
                      selectedSubject && selectedSubject._id !== null
                        ? selectedSubject.name
                        : ""
                    }
                    placeholder="Ch·ªçn m√¥n h·ªçc..."
                  />
                  <ExpandButton
                    className={`${styles.expandButton} ${
                      expandSubject ? styles.rotate : ""
                    }`}
                    onClick={() => setExpandSubject((prev) => !prev)}
                  />
                </div>
              </div>

              <div
                className={`${styles.dropdownList} ${
                  expandSubject ? styles.showList : ""
                }`}
              >
                {subjects.map((subject) => (
                  <div
                    key={subject._id}
                    className={styles.dropdownItem}
                    onClick={() => {
                      setSelectedSubject(subject);
                      setExpandSubject(false);
                      setSelectedChapter(null);
                    }}
                  >
                    {subject.name}
                  </div>
                ))}

                {/* Option "Kh√°c" */}
                <div
                  key="other-subject"
                  className={styles.dropdownItem}
                  onClick={() => {
                    // set object with _id null ‚Äî input s·∫Ω hi·ªÉn th·ªã placeholder
                    setSelectedSubject({ _id: null, name: "Kh√°c" });
                    setExpandSubject(false);
                    setSelectedChapter(null);
                    setChapters([]); // reset chapters list
                  }}
                >
                  Kh√°c
                </div>
              </div>
            </div>

            {/* Chapter: ref b·ªçc c·∫£ input + list */}
            <div style={{ marginTop: 12 }} ref={chapterRef}>
              {selectedSubject && selectedSubject._id !== null && (
                <>
                  <div className={styles.dropdownRow}>
                    <p className={styles.label}>Ch·ªçn ch∆∞∆°ng:</p>
                    <div className={styles.dropdownContainer}>
                      <input
                        type="text"
                        className={styles.dropdownInput}
                        readOnly
                        value={
                          selectedChapter && selectedChapter._id !== null
                            ? selectedChapter.name
                            : ""
                        }
                        placeholder="Ch·ªçn ch∆∞∆°ng..."
                      />
                      <ExpandButton
                        className={`${styles.expandButton} ${
                          expandChapter ? styles.rotate : ""
                        }`}
                        onClick={() => setExpandChapter((prev) => !prev)}
                      />
                    </div>
                  </div>

                  <div
                    className={`${styles.dropdownList} ${
                      expandChapter ? styles.showList : ""
                    }`}
                  >
                    {chapters.map((chapter) => (
                      <div
                        key={chapter._id}
                        className={styles.dropdownItem}
                        onClick={() => {
                          setSelectedChapter(chapter);
                          setExpandChapter(false);
                        }}
                      >
                        {chapter.name}
                      </div>
                    ))}

                    <div
                      key="other-chapter"
                      className={styles.dropdownItem}
                      onClick={() => {
                        setSelectedChapter({ _id: null, name: "Kh√°c" });
                        setExpandChapter(false);
                      }}
                    >
                      Kh√°c
                    </div>
                  </div>
                </>
              )}
            </div>

            {/* N·∫øu ch·ªçn "Kh√°c" */}
            {selectedSubject && selectedSubject._id === null && (
              <p style={{ color: "#3d763a", fontWeight: 600, marginTop: 10 }}>
                B·∫°n ƒë√£ ch·ªçn <strong>Kh√°c</strong> ‚Äî b·∫°n c√≥ th·ªÉ t·∫£i l√™n ƒë·ªÅ m√†
                kh√¥ng c·∫ßn ch·ªçn ch∆∞∆°ng. Admin s·∫Ω ph√¢n lo·∫°i sau khi ki·ªÉm duy·ªát.
              </p>
            )}

            {/* Upload box */}
            <div className={styles.addQuizBox} style={{ marginTop: 16 }}>
              <p className={styles.infoText}>
                {selectedSubject && selectedChapter
                  ? `üìò B·∫°n ƒëang ƒë√≥ng g√≥p ƒë·ªÅ cho ch∆∞∆°ng "${selectedChapter.name}" thu·ªôc m√¥n "${selectedSubject.name}".`
                  : selectedSubject && selectedSubject._id === null
                  ? "üì¶ B·∫°n ƒëang ƒë√≥ng g√≥p ƒë·ªÅ nh∆∞ng ch·ªçn 'Kh√°c' cho m√¥n ‚Äî admin s·∫Ω ph√¢n lo·∫°i sau."
                  : "Vui l√≤ng ch·ªçn m√¥n h·ªçc (ho·∫∑c 'Kh√°c') v√† file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒë√≥ng g√≥p ƒë·ªÅ."}
              </p>

              <div className={styles.uploadSection}>
                <input
                  id="fileInput"
                  type="file"
                  accept=".csv"
                  onChange={(e) => setSelectedFile(e.target.files[0])}
                  className={styles.fileInput}
                />
                {selectedFile && (
                  <p className={styles.fileName}>üìÑ {selectedFile.name}</p>
                )}
                <button
                  className={styles.uploadButton}
                  onClick={handleFileUpload}
                >
                  T·∫£i L√™n CSV
                </button>
              </div>

              {uploadStatus && (
                <p
                  className={`${styles.uploadStatus} ${
                    uploadStatus.includes("‚úÖ")
                      ? styles.success
                      : uploadStatus.includes("‚ùå") ||
                        uploadStatus.includes("‚ö†Ô∏è")
                      ? styles.error
                      : styles.loading
                  }`}
                >
                  {uploadStatus}
                </p>
              )}
            </div>
            {/* Sau n√†y t nghƒ© s·∫Ω g·∫Øn th√™m link ƒë·∫øn trang m√† n√≥ h∆∞·ªõng d·∫´n ho·∫∑c m√¨nh l√†m t√†i li·ªáu*/}
            <div className={styles.guideBox}>
              <h2 className={styles.guideTitle}>
                üìò H∆∞·ªõng D·∫´n Chuy·ªÉn ƒê·ªïi File Sang CSV
              </h2>
              <p className={styles.guideDesc}>
                N·∫øu b·∫°n c√≥ b·ªô c√¢u h·ªèi ·ªü d·∫°ng{" "}
                <strong>PDF, Word, Excel ho·∫∑c TXT</strong>, b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng
                chuy·ªÉn sang ƒë·ªãnh d·∫°ng CSV chu·∫©n tr∆∞·ªõc khi t·∫£i l√™n.
              </p>

              <ul className={styles.guideList}>
                <li>
                  <strong>1Ô∏è‚É£ PDF ‚Üí CSV:</strong> D√πng ph·∫ßn m·ªÅm nh∆∞{" "}
                  <em>SmallPDF</em> ho·∫∑c <em>iLovePDF</em> ƒë·ªÉ xu·∫•t n·ªôi dung sang
                  Word, sau ƒë√≥ copy v√†o Excel r·ªìi l∆∞u d∆∞·ªõi d·∫°ng CSV.
                </li>
                <li>
                  <strong>2Ô∏è‚É£ Word (.docx) ‚Üí CSV:</strong> M·ªü file Word, copy
                  b·∫£ng c√¢u h·ªèi v√†o Excel, ƒë·∫£m b·∫£o m·ªói c·ªôt t∆∞∆°ng ·ª©ng v·ªõi:
                  <em>
                    {" "}
                    C√¢u h·ªèi | ƒê√°p √°n A | ƒê√°p √°n B | ƒê√°p √°n C | ƒê√°p √°n D | ƒê√°p √°n
                    ƒë√∫ng | Gi·∫£i th√≠ch
                  </em>
                  . Sau ƒë√≥{" "}
                  <strong>L∆∞u d∆∞·ªõi d·∫°ng ‚Üí CSV (Comma delimited)</strong>.
                </li>
                <li>
                  <strong>3Ô∏è‚É£ Excel (.xlsx) ‚Üí CSV:</strong> Ch·ªâ c·∫ßn m·ªü file trong
                  Excel, ch·ªçn{" "}
                  <strong>File ‚Üí Save As ‚Üí CSV (Comma delimited)</strong>.
                </li>
                <li>
                  <strong>4Ô∏è‚É£ TXT ‚Üí CSV:</strong> M·ªü b·∫±ng Excel ho·∫∑c Google
                  Sheets, d√πng t√≠nh nƒÉng ‚ÄúText to Columns‚Äù ƒë·ªÉ t√°ch c√°c ph·∫ßn c√¢u
                  h·ªèi, r·ªìi l∆∞u l·∫°i th√†nh CSV.
                </li>
              </ul>
              <div className={styles.exampleBox}>
                <p className={styles.exampleTitle}>
                  üìÑ V√≠ d·ª• m·∫´u file CSV chu·∫©n:
                </p>
                <pre className={styles.exampleCode}>
                  {`question,option1,option2,option3,option4,answer,explain
Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?,H·ªì Ch√≠ Minh,H√† N·ªôi,ƒê√† N·∫µng,H·∫£i Ph√≤ng,H√† N·ªôi,H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam.`}
                </pre>
                <p className={styles.exampleNote}>
                  üëâ M·ªói d√≤ng l√† m·ªôt c√¢u h·ªèi, c√°c c·ªôt ƒë∆∞·ª£c ph√¢n t√°ch b·∫±ng d·∫•u
                  ph·∫©y (,).
                </p>
              </div>
              <p className={styles.guideNote}>
                ‚öôÔ∏è <strong>L∆∞u √Ω:</strong> M·ªói d√≤ng trong file CSV n√™n ƒë·∫°i di·ªán
                cho <em>m·ªôt c√¢u h·ªèi</em>. H√£y ƒë·∫£m b·∫£o kh√¥ng c√≥ d·∫•u ph·∫©y kh√¥ng
                c·∫ßn thi·∫øt trong c√°c √¥ d·ªØ li·ªáu.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
