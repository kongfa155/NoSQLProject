import { useState } from 'react';
import { Modal, Button, Form } from 'react-bootstrap';
import { IoClose } from 'react-icons/io5';
import 'bootstrap/dist/css/bootstrap.min.css';
import styles from './ModalOptionQuiz.module.css';

export default function ModalOptionQuiz({ show, quiz, onClose, onStart }) {
  const [options, setOptions] = useState({
    shuffleQuestions: true,
    showAnswers: true,
    shuffleOptions: false,
    rotationalPractice: true,
    timeLimit: false,
    scoreMode: false, // üîπ Th√™m ch·∫ø ƒë·ªô l√†m b√†i t√≠nh ƒëi·ªÉm
  });

  if (!quiz) return null;

  const handleToggle = (key) => {
    // ‚úÖ N·∫øu toggle "L√†m b√†i c√≥ t√≠nh ƒëi·ªÉm"
    if (key === "scoreMode") {
      setOptions((prev) => {
        const next = !prev.scoreMode;

        if (next) {
          // Khi b·∫≠t "L√†m b√†i c√≥ t√≠nh ƒëi·ªÉm"
          return {
            ...prev,
            scoreMode: true,
            shuffleQuestions: true,
            shuffleOptions: true,
            timeLimit: true,
            showAnswers: false,
            rotationalPractice: false,
          };
        } else {
          // Khi t·∫Øt, cho ph√©p ch·ªânh b√¨nh th∆∞·ªùng l·∫°i
          return { ...prev, scoreMode: false };
        }
      });
      return;
    }

    // ‚úÖ N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô t√≠nh ƒëi·ªÉm th√¨ kh√¥ng cho ƒë·ªïi c√°c option kh√°c
    if (options.scoreMode) return;

    // ‚úÖ Toggle b√¨nh th∆∞·ªùng
    setOptions((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const formatTime = (minutes) => {
    if (!minutes) return "00:00";
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${String(hours).padStart(2, '0')}:${String(mins).padStart(2, '0')}`;
  };

  return (
    <Modal show={show} onHide={onClose} centered size="xl" className={styles.customModal}>
      <Modal.Header className={styles.modalHeader}>
        <Button variant="light" onClick={onClose} style={{ borderRadius: '50%' }}>
          <IoClose size={20} />
        </Button>
      </Modal.Header>

      <Modal.Body className={styles.modalBody}>
        <div className={styles.lessonHeaderWrapper}>
          <div>
            <span className={styles.sectionTitleLabel}>B√†i h·ªçc</span>
            <h3 className={styles.lessonName}>{quiz.name}</h3>
          </div>
          <div>
            <span className={styles.sectionTitleLabel}>Th·ªùi gian l√†m b√†i</span>
            <div className={styles.timeValue}>{formatTime(quiz.timeLimit)}</div>
          </div>
        </div>

        <hr className={styles.sectionDivider} />

        <div className={styles.quizPracticeOptions}>
          {[
            { label: "ƒê·∫£o c√¢u h·ªèi", key: "shuffleQuestions" },
            { label: "Bi·∫øt ƒë√°p √°n", key: "showAnswers" },
            { label: "ƒê·∫£o ƒë√°p √°n", key: "shuffleOptions" },
            { label: "Luy·ªán t·∫≠p xoay v√≤ng", key: "rotationalPractice" },
            { label: "T√≠nh th·ªùi gian", key: "timeLimit" },
            { label: "L√†m b√†i c√≥ t√≠nh ƒëi·ªÉm", key: "scoreMode" }, // üîπ Option m·ªõi
          ].map(({ label, key }) => {
            const isScoreMode = options.scoreMode && key !== "scoreMode";
            return (
              <div className={styles.optionRow} key={key}>
                <span
                  className={isScoreMode ? styles.disabledLabel : ""}
                >
                  {label}
                </span>
                <Form.Check
                  type="switch"
                  id={key}
                  checked={options[key]}
                  onChange={() => handleToggle(key)}
                  className={styles.customToggle}
                  disabled={isScoreMode} // üîí Kh√≥a switch n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô t√≠nh ƒëi·ªÉm
                />
              </div>
            );
          })}
        </div>
      </Modal.Body>

      <Modal.Footer className={styles.modalFooter}>
        <Button
          className={styles.startButton}
          onClick={() => onStart(options)}
        >
          B·∫Øt ƒë·∫ßu l√†m b√†i
        </Button>
      </Modal.Footer>
    </Modal>
  );
}
