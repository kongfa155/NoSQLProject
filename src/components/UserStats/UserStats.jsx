// ---------------- UserStats ----------------
import {
  BarChart,
  Bar,
  CartesianGrid,
  XAxis,
  YAxis,
  Legend,
  Tooltip,
  ResponsiveContainer,
  Line,
} from "recharts";
import { useState, useEffect, useMemo } from "react";
import axios from "axios";

const UserStats = ({ userId, chapters }) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTooltip, setActiveTooltip] = useState(false);

  useEffect(() => {
    if (!userId || !chapters?.length) return;

    const fetchData = async () => {
      setLoading(true);

      try {
        // L·∫•y best submission c·ªßa t·ª´ng quiz
        const chapterDataPromises = chapters.map(async (chapter) => {
          const quizPromises = chapter.quizzes.map(async (quiz) => {
            const res = await axios.get(
              `/api/submissions/latest/${quiz._id}/${userId}`
            );
            // N·∫øu c√≥ submission th√¨ tr·∫£ v·ªÅ score, n·∫øu ch∆∞a th√¨ tr·∫£ v·ªÅ null
            return res.data?.score ?? null;
          });

          const scores = await Promise.all(quizPromises);

          // L·ªçc ra ch·ªâ nh·ªØng quiz c√≥ submission
          const validScores = scores.filter((score) => score !== null);

          // T√≠nh trung b√¨nh d·ª±a tr√™n s·ªë quiz c√≥ submission
          const avg =
            validScores.length > 0
              ? validScores.reduce((a, b) => a + b, 0) / validScores.length
              : 0;

          return {
            name: chapter.name,
            avg: parseFloat(avg.toFixed(1)),
            target: 85,
          };
        });

        const resolvedData = await Promise.all(chapterDataPromises);
        setData(resolvedData);
      } catch (err) {
        console.error("L·ªói khi l·∫•y stats:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [userId, chapters]);

  const overallAvg = useMemo(() => {
    if (!data.length) return 0;
    const sum = data.reduce((acc, d) => acc + d.avg, 0);
    return (sum / data.length).toFixed(1);
  }, [data]);

  const recommendation = useMemo(() => {
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, kh√¥ng ƒë∆∞a ra ƒë·ªÅ xu·∫•t
    if (!data.length) {
      return "Vui l√≤ng ho√†n th√†nh √≠t nh·∫•t m·ªôt b√†i ki·ªÉm tra ƒë·ªÉ nh·∫≠n ƒë·ªÅ xu·∫•t h·ªçc t·∫≠p chi ti·∫øt.";
    }

    // 1. Ph√¢n lo·∫°i c√°c ch∆∞∆°ng d·ª±a tr√™n ƒëi·ªÉm trung b√¨nh
    const weakChapters = data.filter((d) => d.avg < 40).map((d) => d.name);
    const middleChapters = data
      .filter((d) => d.avg >= 40 && d.avg <= 70)
      .map((d) => d.name);
    const strongChapters = data.filter((d) => d.avg > 70).map((d) => d.name);

    let message = "";

    // 2. T·∫°o th√¥ng ƒëi·ªáp t·ªïng quan d·ª±a tr√™n ƒëi·ªÉm trung b√¨nh chung
    if (overallAvg >= 90) {
      message +=
        "üî• R·∫•t xu·∫•t s·∫Øc! B·∫°n ƒëang l√†m r·∫•t t·ªët, h√£y duy tr√¨ phong ƒë·ªô nh√©.";
    } else if (overallAvg >= 75) {
      message += "‚ö° Kh√° t·ªët r·ªìi! Phong ƒë·ªô t·ªïng th·ªÉ c·ªßa b·∫°n r·∫•t ·ªïn ƒë·ªãnh.";
    } else if (overallAvg >= 60) {
      message +=
        "üí™ C·∫ßn c·ªë g·∫Øng h∆°n m·ªôt ch√∫t! H√£y t·∫≠p trung v√†o nh·ªØng ch∆∞∆°ng ch∆∞a ƒë·∫°t y√™u c·∫ßu.";
    } else {
      message +=
        "üìö B·∫°n c·∫ßn √¥n t·∫≠p l·∫°i c√°c ch∆∞∆°ng c∆° b·∫£n. ƒê√£ ƒë·∫øn l√∫c d√†nh th·ªùi gian nghi√™m t√∫c cho vi·ªác h·ªçc.";
    }
    if (weakChapters.length > 0) {
      message += `\n\n‚ö†Ô∏è Ch∆∞∆°ng c·∫ßn T·∫¨P TRUNG CAO ƒê·ªò (${
        weakChapters.length
      } ch∆∞∆°ng) B·∫°n c·∫ßn √¥n t·∫≠p l·∫°i to√†n b·ªô ki·∫øn th·ª©c v√† l√†m th√™m nhi·ªÅu b√†i t·∫≠p cho c√°c ch∆∞∆°ng: ${weakChapters.join(
        ", "
      )}.`;
    }

    if (middleChapters.length > 0) {
      message += `\n\n‚≠ê Ch∆∞∆°ng n√™n √îN T·∫¨P TH√äM (${
        middleChapters.length
      } ch∆∞∆°ng): ƒêi·ªÉm 40% - 70%. B·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c c∆° b·∫£n nh∆∞ng c·∫ßn luy·ªán t·∫≠p nhi·ªÅu h∆°n ƒë·ªÉ n√¢ng cao ƒëi·ªÉm s·ªë ·ªü c√°c ch∆∞∆°ng: ${middleChapters.join(
        ", "
      )}.`;
    }

    if (
      weakChapters.length === 0 &&
      middleChapters.length === 0 &&
      strongChapters.length > 0
    ) {
      // N·∫øu t·∫•t c·∫£ ƒë·ªÅu > 70%
      message += `\n\n‚úÖ ƒê√°nh gi√° chi ti·∫øt: T·∫•t c·∫£ c√°c ch∆∞∆°ng ƒë·ªÅu ƒë·∫°t k·∫øt qu·∫£ T·ªêT (tr√™n 70%). H√£y ti·∫øp t·ª•c luy·ªán t·∫≠p ƒë·ªÉ ƒë·∫°t m·ª©c ho√†n h·∫£o 100%!`;
    } else if (
      strongChapters.length > 0 &&
      (weakChapters.length > 0 || middleChapters.length > 0)
    ) {
      // Tr∆∞·ªùng h·ª£p c√≥ c·∫£ ch∆∞∆°ng t·ªët v√† ch∆∞∆°ng y·∫øu
      message += `\n\n‚úÖ ƒê√°nh gi√° chi ti·∫øt: B·∫°n ƒë√£ ƒë·∫°t k·∫øt qu·∫£ T·ªêT (tr√™n 70%) ·ªü c√°c ch∆∞∆°ng: ${strongChapters.join(
        ", "
      )}. H√£y t·∫°m th·ªùi ∆∞u ti√™n th·ªùi gian cho c√°c ch∆∞∆°ng c√≤n y·∫øu h∆°n.`;
    }

    return message;
  }, [overallAvg, data]);

  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;

  // Custom Tooltip component
  const CustomTooltip = ({ active, payload, label }) => {
    // Ch·ªâ hi·ªÉn th·ªã Tooltip n·∫øu activeTooltip l√† TRUE v√† Recharts b√°o active
    if (activeTooltip && active && payload && payload.length) {
      return (
        <div
          style={{
            backgroundColor: "#f9f9f9",
            borderRadius: "8px",
            border: "1px solid #ddd",
            padding: "8px",
            fontSize: "14px",
          }}
        >
          <p className="label" style={{ fontWeight: "bold", color: "#3D763A" }}>
            {label}
          </p>
          {payload.map((p, index) => (
            <p key={index} style={{ color: p.color || "#333" }}>
              {p.name}: <span style={{ fontWeight: "600" }}>{p.value}%</span>
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  return (
    <div className="flex flex-col gap-6">
      <div style={{ width: "100%", height: 350, padding: "16px 0" }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={data}
            margin={{ top: 10, right: 20, left: 40, bottom: 10 }}
            onMouseLeave={() => setActiveTooltip(false)}
          >
            <CartesianGrid stroke="#eee" strokeDasharray="3 3" />
            <XAxis
              dataKey="name"
              tick={{ fill: "#3D763A", fontWeight: 600 }}
              tickMargin={10}
            />
            <YAxis
              domain={[0, 100]}
              tick={{ fill: "#3D763A", fontWeight: 600 }}
              label={{
                value: "ƒêi·ªÉm trung b√¨nh (%)",
                angle: -90,
                position: "insideLeft",
                offset: -10,
                fill: "#3D763A",
                fontWeight: 600,
              }}
            />
            <Tooltip trigger="hover" cursor={false} content={CustomTooltip} />
            <Legend verticalAlign="top" align="right" />
            <Bar
              dataKey="avg"
              name="ƒêi·ªÉm trung b√¨nh"
              fill="#3D763A"
              radius={[8, 8, 0, 0]}
              barSize={40}
              onMouseOver={() => setActiveTooltip(true)}
              onMouseOut={() => setActiveTooltip(false)}
            />
            <Line
              type="monotone"
              dataKey="target"
              stroke="#E53E3E"
              strokeWidth={2}
              dot={{ r: 3 }}
              name="M·ª•c ti√™u"
              strokeDasharray="4 4"
            />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div
        className="p-6 rounded-xl border border-gray-200 bg-[#F8FFF8] shadow-sm"
        style={{ lineHeight: 1.6 }}
      >
        <p className="text-xl font-semibold text-[#3D763A] mb-2">
          üìä T·ªïng k·∫øt k·∫øt qu·∫£ h·ªçc t·∫≠p
        </p>
        <p className="text-lg text-gray-700 mb-2">
          ƒêi·ªÉm trung b√¨nh hi·ªán t·∫°i:{" "}
          <span className="font-bold text-[#2F855A]">{overallAvg}%</span>
        </p>
        <p
          className="text-gray-700 text-base italic"
          style={{ whiteSpace: "pre-line" }}
        >
          {recommendation}
        </p>
      </div>
    </div>
  );
};

export default UserStats;
